
type {{.Model}}Service struct {
	fuel.Service `prefix:"api" root:"{{.Root}}" version:"1"`

	// Custom apis:

	// Automatic apis:
	get     fuel.GET    `route:"{{.KeyRoute}}"`
	insert  fuel.POST   `route:"-"`
	update  fuel.PUT    `route:"{{.KeyRoute}}"`
	delete  fuel.DELETE `route:"{{.KeyRoute}}"`
	find    fuel.GET    `route:"find"`
	query   fuel.POST   `route:"query"`

    {{if .IsDyn}}
	// Attributes for DynamicField:
	attribute       fuel.GET  `route:"/attr/{id:[0-9]+}"`
	attributeList   fuel.GET  `route:"/attr/list"`
	attributeCode   fuel.GET  `route:"/attr/code/{code}"`
	attributeInsert fuel.POST `route:"/attr"`
	attributeUpdate fuel.PUT  `route:"/attr/{id:[0-9]+}"`
    {{end}}

	{{if .Files}}// Files related apis: {{ range $fld, $map := .Files }} {{ $url := $map.url}} {{ $meth := $map.meth}} {{ $db := $map.db}}
	{{$meth}}Get        fuel.GET    `route:"{id:[0-9]+}/{{$url}}"`
	{{$meth}}Default    fuel.GET    `route:"{id:[0-9]+}/{{$url}}/default"`
	{{$meth}}Append     fuel.POST   `route:"{id:[0-9]+}/{{$url}}"`
	{{$meth}}Move       fuel.PUT    `route:"{id:[0-9]+}/{{$url}}/{pos:[0-9]+}/move-to/{posDest:[0-9]+}"`
	{{$meth}}Remove     fuel.DELETE `route:"{id:[0-9]+}/{{$url}}/{pos:[0-9]+}"`
	{{$meth}}RemoveMany fuel.DELETE `route:"{id:[0-9]+}/{{$url}}/{startPos:[0-9]+}/to/{endPos:[0-9]+}"`
	{{$meth}}MoveMany   fuel.PUT    `route:"{id:[0-9]+}/{{$url}}/move-many"`
	{{ end }}
	{{ end }}

}

//---------------------------------------
// Custom API endpoints
//---------------------------------------


//---------------------------------------
// Automatically generated API endpoints
//---------------------------------------


func ({{.VarContr}} *{{.Model}}Service) Get({{.Key}} {{.KeyType}}, ad fuel.Aide) (*{{.Model}}, error) {
	var {{.VarSing}} {{.Model}}
	dbo := fuel.QueryDB(ad)
	err := dbo.Where("{{.Key}}=?",{{.Key}}).First(&{{.VarSing}}).Error
	return &{{.VarSing}}, err
}

func ({{.VarContr}} *{{.Model}}Service) Insert(h fuel.Aide) (*{{.Model}}, error) {
	var {{.VarSing}} {{.Model}}
	var err error

	// Custom validations
	var ihook interface{} = {{.VarSing}}
	hsave, save := ihook.(fuel.HookSave)
	if save {
		err = hsave.PreSave(h)
		if err != nil {
			return nil, err
		}
	}
	hins, ins := ihook.(fuel.HookInsert)
	if ins {
		err = hins.PreInsert(h)
		if err != nil {
			return nil, err
		}
	}

    {{if .IsDyn}}
	// Validation of Dynamic Fields
	var ok bool
	if ok, err = dorm.AttributeValidate({{.VarSing}}, h.Post(), "insert"); !ok {
		return nil, err
	}
    {{end}}
    
	{{if .HasFile}}
	// save any embedded file data to disk, and then update post vars
	err = dorm.SaveAnyFile(h.Request, h.Post(), {{.VarSing}})
	if err != nil {
		return nil, err
	}
	{{end}}

    {{if .HasWho}}
	// set request info
	posted := h.Post()
	posted["who"] = dorm.WhoStr(h.Request)
    {{end}}

	// store in db
	dbo := dorm.GetORM(true)
	err = dorm.InsertSelect(dbo, &{{.VarSing}}, h.Post())
	if err != nil {
		return nil, err
	}

	return &{{.VarSing}}, nil
}

func ({{.VarContr}} *{{.Model}}Service) Update({{.Key}} {{.KeyType}}, h fuel.Aide) (*{{.Model}}, error) {
	var {{.VarSing}} {{.Model}}
	var err error

	dbo := dorm.GetORM(true)
    
	// Custom validations
	var ihook interface{} = {{.VarSing}}
	hsave, save := ihook.(fuel.HookSave)
	if save {
		err = hsave.PreSave(h)
		if err != nil {
			return nil, err
		}
	}
	hupd, upd := ihook.(fuel.HookUpdate)
	if upd {
		err = hupd.PreUpdate(h)
		if err != nil {
			return nil, err
		}
	}

    {{if .IsDyn}}
	// Validation of Dynamic Fields
	var ok bool
	if ok, err = dorm.AttributeValidate({{.VarSing}}, h.Post(), "update"); !ok {
		return nil, err
	}
    {{end}}
    

	{{if .HasFile}}
	// save any embedded file data to disk, and then update post vars
	err = dorm.SaveAnyFile(h.Request, h.Post(), {{.VarSing}})
	if err != nil {
		return nil, err
	}
	{{end}}

    {{if .HasWho}}
	// set request info
	posted := h.Post()
	posted["who"] = dorm.WhoStr(h.Request)
    {{end}}

	// store in db
	err = dorm.UpdateSelect(dbo, "{{.Key}}", {{.Key}}, &{{.VarSing}}, h.Post())
	if err != nil {
		return nil, err
	}

	
	return &{{.VarSing}}, nil
}

func ({{.VarContr}} *{{.Model}}Service) Delete({{.Key}} {{.KeyType}}, h fuel.Aide) (*{{.Model}}, error) {
	var {{.VarSing}} {{.Model}}
	var err error
	req := dorm.WhoStr(h.Request)

	dbo := dorm.GetORM(true)
	err = dbo.Exec("UPDATE {{.Table}} SET deleted=1, who=? WHERE {{.Key}}=?", req, {{.Key}}).Error
	if err != nil {
		return nil, err
	}

	err = dbo.Where("{{.Key}}=?",{{.Key}}).First(&{{.VarSing}}).Error
	if err != nil {
		return nil, err
	}

	return &{{.VarSing}}, nil
}

func ({{.VarContr}} *{{.Model}}Service) Find(ad fuel.Aide) ([]{{.Model}}, error) {
	var {{.VarSing}}  {{.Model}}
    var list []{{.Model}}
	err := fuel.FindHelper({{.VarSing}}, &list, ad, nil)
	return list, err
}

func ({{.VarContr}} *{{.Model}}Service) Query(ad fuel.Aide) ([]{{.Model}}, error) {
	var {{.VarSing}}  {{.Model}}
    var list []{{.Model}}
	err := fuel.QueryHelper({{.VarSing}}, &list, ad, nil)
	return list, err
}


{{if .IsDyn}}
//---------------------------------------
// Attributes for Dynamic Field
//---------------------------------------

func ({{.VarContr}} *{{.Model}}Service) Attribute(id uint) (dorm.AttributeEntity, error) {
	var att dorm.AttributeEntity
	dbo := dorm.GetORM(true)
	err := dbo.Where("entity=? and id=?", "{{.Table}}", id).Find(&att).Error
	return att, err
}

func ({{.VarContr}} *{{.Model}}Service) AttributeCode(code string) (dorm.AttributeEntity, error) {
	var att dorm.AttributeEntity
	dbo := dorm.GetORM(true)
	err := dbo.Where("entity=? and field='info' and code=?", "{{.Table}}", code).Find(&att).Error
	return att, err
}

func ({{.VarContr}} *{{.Model}}Service) AttributeList() ([]dorm.AttributeEntity, error) {
	var atts []dorm.AttributeEntity
	dbo := dorm.GetORM(true)
	err := dbo.Where("entity=?", "{{.Table}}").Order("entity, field, code").Find(&atts).Error
	return atts, err
}

func ({{.VarContr}} *{{.Model}}Service) AttributeInsert(h fuel.Aide) (*dorm.AttributeEntity, error) {
	var post = h.Post()
	var {{.VarSing}} {{.Model}}
	if refl.ComposedOf({{.VarSing}}, dorm.WhosThat{}) {
		post["who"] = dorm.WhoStr(h.Request)
	}
	return dorm.AttributeInsertViaEntity(post, "{{.Table}}", "info")
}

func ({{.VarContr}} *{{.Model}}Service) AttributeUpdate(id string, h fuel.Aide) (*dorm.AttributeEntity, error) {
	var post = h.Post()
	var {{.VarSing}} {{.Model}}
	if refl.ComposedOf({{.VarSing}}, dorm.WhosThat{}) {
		post["who"] = dorm.WhoStr(h.Request)
	}
	return dorm.AttributeUpdateViaEntity(post, id)
}
{{end}}




{{if .Files}}
//---------------------------------------
// Files: handling and saving
//---------------------------------------

{{ range $fld, $map := .Files }}
{{ $url := $map.url}}
{{ $meth := $map.meth}}
{{ $db := $map.db}}

func ({{$.VarContr}} *{{$.Model}}Service) {{$fld}}Get({{$.Key}} {{$.KeyType}}) (*dorm.Files, error) {
	var {{$.VarSing}} {{$.Model}}
	dbo := dorm.GetORM(true)
	err := dbo.Where("{{$.Key}}=?",{{$.Key}}).First(&{{$.VarSing}}).Error
	if err != nil {
		return nil, err
	}

	// If nil then return empty
	if {{$.VarSing}}.{{$fld}} == nil {
		list := make(dorm.Files, 0)
		return &list, nil
	}

	return {{$.VarSing}}.{{$fld}}, nil
}

func ({{$.VarContr}} *{{$.Model}}Service) {{$fld}}Default({{$.Key}} {{$.KeyType}}) (*dorm.File, error) {
	var {{$.VarSing}} {{$.Model}}
	dbo := dorm.GetORM(true)
	err := dbo.Where("{{$.Key}}=?",{{$.Key}}).First(&{{$.VarSing}}).Error
	if err != nil {
		return nil, err
	}

	// If nil then error
	if {{$.VarSing}}.{{$fld}} == nil || len(*{{$.VarSing}}.{{$fld}}) == 0 {
		return nil, errors.New("no file found")
	}

	dflt := (*{{$.VarSing}}.{{$fld}})[0]
	return &dflt, nil
}

func ({{$.VarContr}} *{{$.Model}}Service) {{$fld}}Append({{$.Key}} {{$.KeyType}}, ad fuel.Aide) (*dorm.Files, error) {
	var {{$.VarSing}} {{$.Model}}
	dbo := dorm.GetORM(true)
	err := dbo.Where("{{$.Key}}=?",{{$.Key}}).First(&{{$.VarSing}}).Error
	if err != nil {
		return nil, err
	}

	// validate postback contains data
	f, fh, err := ad.Request.FormFile("file")
	if err != nil {
		return nil, err
	}

	// create new file record
	md, err := dorm.NewMedia(f, fh, "{{$.Table}}", "{{$db}}", dorm.WhoMap(ad.Request))
	if err != nil {
		return nil, err
	}

	// append to collection
	if {{$.VarSing}}.{{$fld}} == nil {
		list := make(dorm.Files, 0)
		{{$.VarSing}}.{{$fld}} = &list
	}

	*{{$.VarSing}}.{{$fld}} = append(*{{$.VarSing}}.{{$fld}}, md.File())
	err = dbo.Model({{$.VarSing}}).Where("{{$.Key}}=?", {{$.Key}}).Update("{{$db}}", {{$.VarSing}}.{{$fld}}).Error
	if err != nil {
		return nil, err
	}

	return {{$.VarSing}}.{{$fld}}, nil
}

func ({{$.VarContr}} *{{$.Model}}Service) {{$fld}}Remove({{$.Key}} {{$.KeyType}}, pos int) (*dorm.Files, error) {
	var {{$.VarSing}} {{$.Model}}
	dbo := dorm.GetORM(true)
	err := dbo.Where("{{$.Key}}=?",{{$.Key}}).First(&{{$.VarSing}}).Error
	if err != nil {
		return nil, err
	}

	// are there any files at all?
	if {{$.VarSing}}.{{$fld}} == nil {
		return nil, errors.New("no files found")
	}

	// does the given position exist?
	if pos >= len(*{{$.VarSing}}.{{$fld}}) {
		return nil, errors.New("no file found at the given position")
	}

	// remove that pos, and save
	list := *{{$.VarSing}}.{{$fld}}
	list = append(list[:pos], list[pos+1:]...)
	err = dbo.Model({{$.VarSing}}).Where("{{$.Key}}=?", {{$.Key}}).Update("{{$db}}", &list).Error
	if err != nil {
		return nil, err
	}

	return &list, nil
}

func ({{$.VarContr}} *{{$.Model}}Service) {{$fld}}Move({{$.Key}} {{$.KeyType}}, pos int, posDest int) (*dorm.Files, error) {
	var {{$.VarSing}} {{$.Model}}
	dbo := dorm.GetORM(true)
	err := dbo.Where("{{$.Key}}=?",{{$.Key}}).First(&{{$.VarSing}}).Error
	if err != nil {
		return nil, err
	}

	// are there any files at all?
	if {{$.VarSing}}.{{$fld}} == nil {
		return nil, errors.New("no files found")
	}

	// does the given position exist?
	if pos >= len(*{{$.VarSing}}.{{$fld}}) {
		return nil, errors.New("no file found at src position")
	}
	if posDest >= len(*{{$.VarSing}}.{{$fld}}) {
		return nil, errors.New("no file found at dest position")
	}

	// remove that pos, and save
	list := *{{$.VarSing}}.{{$fld}}
	img := list[pos]
	list = append(list[:pos], list[pos+1:]...) // list is shrunk by 1 item

	newList := make(dorm.Files, 0)
	if posDest == len(list) { // send to the end
		newList = append(list, img)
	} else { // insert at specific position
		for i := range list {
			if i == posDest {
				newList = append(newList, img, list[i])
			} else {
				newList = append(newList, list[i])
			}
		}
	}

	err = dbo.Model({{$.VarSing}}).Where("{{$.Key}}=?", {{$.Key}}).Update("{{$db}}", &newList).Error
	if err != nil {
		return nil, err
	}

	return &newList, nil
}

func ({{$.VarContr}} *{{$.Model}}Service) {{$fld}}MoveMany({{$.Key}} {{$.KeyType}}, ad fuel.Aide) (*dorm.Files, error) {
	var {{$.VarSing}} {{$.Model}}
	dbo := dorm.GetORM(true)
	err := dbo.Where("{{$.Key}}=?",{{$.Key}}).First(&{{$.VarSing}}).Error
	if err != nil {
		return nil, err
	}

	// are there any files at all?
	if {{$.VarSing}}.{{$fld}} == nil {
		return nil, errors.New("no files found")
	}
	
	// Validate input
	body := ad.Post()
	rList, ok := body["ref_list"]
	if !ok {
		return nil, errors.New("ref_list must be present")
	}

	refArr := []string{}
	if err = json.Unmarshal([]byte(rList), &refArr); err != nil {
		return nil, err
	}

	if len(refArr) != len(*{{$.VarSing}}.{{$fld}}) {
		return nil, fmt.Errorf("ref_list length mismatch found %d, expected: %d", len(refArr), len(*{{$.VarSing}}.{{$fld}}))
	}

	// create a dictionary with ref as key and all the other relevant fields as value
	dict := make(map[string]dorm.File, len(*{{$.VarSing}}.{{$fld}}))
	for _, val := range *{{$.VarSing}}.{{$fld}} {
		dict[val.Ref] = val
	}

	// fetch other relevant fields across the newly swapped ref-list
	newArr := make(dorm.Files, len(refArr))
	for ind, ref := range refArr {
		newArr[ind] = dict[ref]
	}

	err = dbo.Model({{$.VarSing}}).Where("{{$.Key}}=?", {{$.Key}}).Update("{{$db}}", &newArr).Error
	if err != nil {
		return nil, err
	}

	return &newArr, nil
}

func ({{$.VarContr}} *{{$.Model}}Service) {{$fld}}RemoveMany({{$.Key}} {{$.KeyType}}, startPos int, endPos int) (*dorm.Files, error) {
	var {{$.VarSing}} {{$.Model}}
	dbo := dorm.GetORM(true)
	err := dbo.Where("{{$.Key}}=?",{{$.Key}}).First(&{{$.VarSing}}).Error
	if err != nil {
		return nil, err
	}

    // are there any files at all?
    if {{$.VarSing}}.{{$fld}} == nil {
        return nil, errors.New("no files found")
    }

    // does the given position exist?
    if startPos >= len(*{{$.VarSing}}.{{$fld}}) {
        return nil, errors.New("no file found at the starting position")
    }
    if endPos >= len(*{{$.VarSing}}.{{$fld}}) {
        return nil, errors.New("no file found at ending position")
    }

    // removed from pos to dest pos, and save
    list := *{{$.VarSing}}.{{$fld}}
    list = append(list[:startPos], list[endPos+1:]...)
    err = dbo.Model({{$.VarSing}}).Where("{{$.Key}}=?", {{$.Key}}).Update("{{$db}}", &list).Error
    if err != nil {
        return nil, err
    }

    return &list, nil
}

{{ end }}
{{ end }}